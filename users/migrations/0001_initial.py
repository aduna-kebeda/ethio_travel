# Generated by Django 4.2.7 on 2025-04-20 18:18

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                (
                    "username",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Username must be 3-20 characters long and can only contain lowercase letters, numbers, underscores, and hyphens.",
                                regex="^[a-z0-9_-]{3,20}$",
                            )
                        ],
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("credentials", "Credentials"),
                            ("google", "Google"),
                            ("facebook", "Facebook"),
                        ],
                        default="credentials",
                        max_length=20,
                    ),
                ),
                (
                    "provider_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("business_owner", "Business Owner"),
                            ("admin", "Admin"),
                        ],
                        default="user",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("suspended", "Suspended"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("email_verified", models.BooleanField(default=False)),
                (
                    "verification_token",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("verification_expires", models.DateTimeField(blank=True, null=True)),
                (
                    "reset_password_token",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("reset_password_expires", models.DateTimeField(blank=True, null=True)),
                ("login_attempts", models.IntegerField(default=0)),
                ("lock_until", models.DateTimeField(blank=True, null=True)),
                ("interests", models.JSONField(default=list)),
                ("image", models.ImageField(blank=True, null=True, upload_to="users/")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_set",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BusinessOwnerProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("business_name", models.CharField(max_length=200)),
                ("business_type", models.CharField(max_length=100)),
                ("business_description", models.TextField()),
                ("business_phone", models.CharField(max_length=20)),
                ("business_email", models.EmailField(max_length=254)),
                ("business_website", models.URLField(blank=True, null=True)),
                ("business_address", models.TextField()),
                ("business_city", models.CharField(max_length=100)),
                ("business_country", models.CharField(max_length=100)),
                (
                    "business_registration_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "business_tax_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "business_license",
                    models.FileField(
                        blank=True, null=True, upload_to="business_licenses/"
                    ),
                ),
                (
                    "business_logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="business_logos/"
                    ),
                ),
                ("business_photos", models.JSONField(blank=True, default=list)),
                ("business_social_media", models.JSONField(blank=True, default=dict)),
                (
                    "business_operating_hours",
                    models.JSONField(blank=True, default=dict),
                ),
                (
                    "business_payment_methods",
                    models.JSONField(blank=True, default=list),
                ),
                ("business_amenities", models.JSONField(blank=True, default=list)),
                ("business_cancellation_policy", models.TextField(blank=True)),
                ("business_terms_conditions", models.TextField(blank=True)),
                ("business_privacy_policy", models.TextField(blank=True)),
                (
                    "business_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("business_review_count", models.IntegerField(default=0)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "verification_status",
                    models.CharField(default="pending", max_length=20),
                ),
                ("verification_documents", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="business_profile",
                        to="users.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        max_length=20,
                    ),
                ),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("address", models.CharField(blank=True, max_length=255)),
                ("preferred_language", models.CharField(default="en", max_length=10)),
                ("preferred_currency", models.CharField(default="ETB", max_length=3)),
                ("travel_interests", models.JSONField(default=list)),
                ("accommodation_types", models.JSONField(default=list)),
                (
                    "budget_range",
                    models.CharField(
                        choices=[
                            ("Budget", "Budget"),
                            ("Mid-range", "Mid-range"),
                            ("Luxury", "Luxury"),
                        ],
                        default="Mid-range",
                        max_length=20,
                    ),
                ),
                ("travel_style", models.JSONField(default=list)),
                ("email_notifications", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=False)),
                ("marketing_notifications", models.BooleanField(default=True)),
                ("new_deals_notifications", models.BooleanField(default=True)),
                ("event_reminders", models.BooleanField(default=True)),
                ("trip_reminders", models.BooleanField(default=True)),
                ("facebook", models.URLField(blank=True)),
                ("instagram", models.CharField(blank=True, max_length=100)),
                ("twitter", models.CharField(blank=True, max_length=100)),
                ("linkedin", models.URLField(blank=True)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_relationship",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "emergency_contact_email",
                    models.EmailField(blank=True, max_length=254),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to="users.user",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["user"], name="users_userp_user_id_d181df_idx")
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_user_email_6f2530_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["username"], name="users_user_usernam_65d164_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="businessownerprofile",
            index=models.Index(fields=["user"], name="users_busin_user_id_76be0d_idx"),
        ),
    ]
